package scalan.meta.scalanizer

import scalan.meta.ScalanAst.WrapperDescr

/** The object contains the current state and temporary data of the Scalanizer.
  * Scalanizer is a component which can be used from different contexts to generated
  * boilerplate code such as wrappers, Impl files etc.
  * Scalanizer object is created for a set of Scalan modules of scalan-meta (SModuleDef) */
trait ScalanizerState {
  import scala.collection.mutable.Map

  /** Mapping of module name to its extensions that should be generated by the plugin.
    * For example: Segments -> Set(SegmentsDsl, SegmentsDslStd, SegmentsDslExp) */
  val subcakesOfModule: Map[String, Set[String]]

  /** Mapping between modules and another modules used by them.
    * For example "Vecs" -> List("NumMonoids", "Cols", "LinearAlgebra") */
  val dependenceOfModule: Map[String, List[String]]

  /** Mapping of module name to the package where it is defined.
    * For example "Cols" -> "scalanizer.collections" */
  val packageOfModule: Map[String, String]

  /** Mapping of external type names to their wrappers. */
  val wrappers: Map[String, WrapperDescr]

  /** Names of external types. They must be read only after the WrapFrontend phase. */
  def externalTypes = wrappers.keySet
}
