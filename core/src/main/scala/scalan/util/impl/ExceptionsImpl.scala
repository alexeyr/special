package scalan.util

import scalan._
import scala.reflect.runtime.universe.{WeakTypeTag, weakTypeTag}
import scalan.meta.ScalanAst._

package impl {
// Abs -----------------------------------
trait ExceptionsDefs extends scalan.ScalanExp with Exceptions {
  self: ExceptionsDsl =>

  // entityProxy: single proxy for each type family
  implicit def proxySThrowable(p: Rep[SThrowable]): SThrowable = {
    proxyOps[SThrowable](p)(scala.reflect.classTag[SThrowable])
  }

  //proxyBT: TypeWrapper proxy
  //implicit def proxyThrowable(p: Rep[Throwable]): SThrowable =
  //  proxyOps[SThrowable](p.asRep[SThrowable])

  implicit def unwrapValueOfSThrowable(w: Rep[SThrowable]): Rep[Throwable] = w.wrappedValue

  implicit lazy val throwableElement: Elem[Throwable] =
    element[SThrowable].asInstanceOf[WrapperElem[_, _]].baseElem.asInstanceOf[Elem[Throwable]]

  // familyElem
  class SThrowableElem[To <: SThrowable]
    extends WrapperElem[Throwable, To] {
    lazy val parent: Option[Elem[_]] = None
    lazy val typeArgs = TypeArgs()
    override lazy val tag = {
      weakTypeTag[SThrowable].asInstanceOf[WeakTypeTag[To]]
    }
    override def convert(x: Rep[Def[_]]) = {
      implicit val eTo: Elem[To] = this
      val conv = fun {x: Rep[SThrowable] => convertSThrowable(x) }
      tryConvert(element[SThrowable], this, x, conv)
    }

    def convertSThrowable(x: Rep[SThrowable]): Rep[To] = {
      x.elem match {
        case _: SThrowableElem[_] => x.asRep[To]
        case e => !!!(s"Expected $x to have SThrowableElem[_], but got $e", x)
      }
    }
    lazy val baseElem = {
      new BaseTypeElem[Throwable, SThrowable](this.asInstanceOf[Elem[SThrowable]])
    }
    lazy val eTo: Elem[_] = new SThrowableImplElem(isoSThrowableImpl)
    override def getDefaultRep: Rep[To] = ???
  }

  implicit def sThrowableElement: Elem[SThrowable] =
    elemCache.getOrElseUpdate(
      (classOf[SThrowableElem[SThrowable]], Nil),
      new SThrowableElem[SThrowable]).asInstanceOf[Elem[SThrowable]]

  implicit case object SThrowableCompanionElem extends CompanionElem[SThrowableCompanionCtor] {
    lazy val tag = weakTypeTag[SThrowableCompanionCtor]
    protected def getDefaultRep = SThrowable
  }

  abstract class SThrowableCompanionCtor extends CompanionDef[SThrowableCompanionCtor] with SThrowableCompanion {
    def selfType = SThrowableCompanionElem
    override def toString = "SThrowable"
  }
  implicit def proxySThrowableCompanionCtor(p: Rep[SThrowableCompanionCtor]): SThrowableCompanionCtor =
    proxyOps[SThrowableCompanionCtor](p)

  // default wrapper implementation
  abstract class SThrowableImpl(val wrappedValue: Rep[Throwable]) extends SThrowable with Def[SThrowableImpl] {
    lazy val selfType = element[SThrowableImpl]

    def getMessage: Rep[String] =
      methodCallEx[String](self,
        this.getClass.getMethod("getMessage"),
        List())

    def initCause(cause: Rep[SThrowable]): Rep[SThrowable] =
      methodCallEx[SThrowable](self,
        this.getClass.getMethod("initCause", classOf[AnyRef]),
        List(cause.asInstanceOf[AnyRef]))
  }
  case class SThrowableImplCtor(override val wrappedValue: Rep[Throwable]) extends SThrowableImpl(wrappedValue) {
  }
  trait SThrowableImplCompanion
  // elem for concrete class
  class SThrowableImplElem(val iso: Iso[SThrowableImplData, SThrowableImpl])
    extends SThrowableElem[SThrowableImpl]
    with ConcreteElem[SThrowableImplData, SThrowableImpl] {
    override lazy val parent: Option[Elem[_]] = Some(sThrowableElement)
    override lazy val typeArgs = TypeArgs()
    override lazy val eTo: Elem[_] = this
    override def convertSThrowable(x: Rep[SThrowable]) = // Converter is not generated by meta
!!!("Cannot convert from SThrowable to SThrowableImpl: missing fields List(wrappedValue)")
    override def getDefaultRep = SThrowableImpl(DefaultOfThrowable)
    override lazy val tag = {
      weakTypeTag[SThrowableImpl]
    }
  }

  // state representation type
  type SThrowableImplData = Throwable

  // 3) Iso for concrete class
  class SThrowableImplIso
    extends EntityIso[SThrowableImplData, SThrowableImpl] with Def[SThrowableImplIso] {
    override def from(p: Rep[SThrowableImpl]) =
      p.wrappedValue
    override def to(p: Rep[Throwable]) = {
      val wrappedValue = p
      SThrowableImpl(wrappedValue)
    }
    lazy val eFrom = element[Throwable]
    lazy val eTo = new SThrowableImplElem(self)
    lazy val selfType = new SThrowableImplIsoElem
    def productArity = 0
    def productElement(n: Int) = ???
  }
  case class SThrowableImplIsoElem() extends Elem[SThrowableImplIso] {
    def getDefaultRep = reifyObject(new SThrowableImplIso())
    lazy val tag = {
      weakTypeTag[SThrowableImplIso]
    }
    lazy val typeArgs = TypeArgs()
  }
  // 4) constructor and deconstructor
  class SThrowableImplCompanionCtor extends CompanionDef[SThrowableImplCompanionCtor] {
    def selfType = SThrowableImplCompanionElem
    override def toString = "SThrowableImplCompanion"

    @scalan.OverloadId("fromFields")
    def apply(wrappedValue: Rep[Throwable]): Rep[SThrowableImpl] =
      mkSThrowableImpl(wrappedValue)

    def unapply(p: Rep[SThrowable]) = unmkSThrowableImpl(p)
  }
  lazy val SThrowableImplRep: Rep[SThrowableImplCompanionCtor] = new SThrowableImplCompanionCtor
  lazy val SThrowableImpl: SThrowableImplCompanionCtor = proxySThrowableImplCompanion(SThrowableImplRep)
  implicit def proxySThrowableImplCompanion(p: Rep[SThrowableImplCompanionCtor]): SThrowableImplCompanionCtor = {
    proxyOps[SThrowableImplCompanionCtor](p)
  }

  implicit case object SThrowableImplCompanionElem extends CompanionElem[SThrowableImplCompanionCtor] {
    lazy val tag = weakTypeTag[SThrowableImplCompanionCtor]
    protected def getDefaultRep = SThrowableImplRep
  }

  implicit def proxySThrowableImpl(p: Rep[SThrowableImpl]): SThrowableImpl =
    proxyOps[SThrowableImpl](p)

  implicit class ExtendedSThrowableImpl(p: Rep[SThrowableImpl]) {
    def toData: Rep[SThrowableImplData] = isoSThrowableImpl.from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoSThrowableImpl: Iso[SThrowableImplData, SThrowableImpl] =
    reifyObject(new SThrowableImplIso())

  registerModule(Exceptions_Module)

  lazy val SThrowable: Rep[SThrowableCompanionCtor] = new SThrowableCompanionCtor {
    def apply(msg: Rep[String]): Rep[SThrowable] =
      newObjEx[SThrowable](msg)
  }

  object SThrowableImplMethods {
  }

  def mkSThrowableImpl
    (wrappedValue: Rep[Throwable]): Rep[SThrowableImpl] = {
    new SThrowableImplCtor(wrappedValue)
  }
  def unmkSThrowableImpl(p: Rep[SThrowable]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: SThrowableImplElem @unchecked =>
      Some((p.asRep[SThrowableImpl].wrappedValue))
    case _ =>
      None
  }

  object SThrowableMethods {
    object getMessage {
      def unapply(d: Def[_]): Option[Rep[SThrowable]] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[SThrowableElem[_]] && method.getName == "getMessage" =>
          Some(receiver).asInstanceOf[Option[Rep[SThrowable]]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[SThrowable]] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }

    object initCause {
      def unapply(d: Def[_]): Option[(Rep[SThrowable], Rep[SThrowable])] = d match {
        case MethodCall(receiver, method, Seq(cause, _*), _) if receiver.elem.isInstanceOf[SThrowableElem[_]] && method.getName == "initCause" =>
          Some((receiver, cause)).asInstanceOf[Option[(Rep[SThrowable], Rep[SThrowable])]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[(Rep[SThrowable], Rep[SThrowable])] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }

  object SThrowableCompanionMethods {
    object apply {
      def unapply(d: Def[_]): Option[Rep[String]] = d match {
        case MethodCall(receiver, method, Seq(msg, _*), _) if receiver.elem == SThrowableCompanionElem && method.getName == "apply" =>
          Some(msg).asInstanceOf[Option[Rep[String]]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[String]] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }
}

object Exceptions_Module extends scalan.ModuleInfo {
  val dump = "H4sIAAAAAAAAALVVO2wURxj+72xyT5AfikQSiRhrDQjBnRUKEFYSWfY5SnTYFmswOhBobnd8HjK7O+zMmb0UpIICuihKESkFSqI0KFKULnUiRVGUIm1qCsRDiAKqIGZmZ/fOxsujYIvR7My//+P7vv/fW/dhBw9hgjuIIr/mYYFqtt7PcmHZJwK3S/E8Xlu6d3XPne8PPc7DaAveWkd8ntMWlOJNI2Lp3hZuE0YXiO82fEFEz/K0CwG1ZhyjrmLUt4thDXw104QS8h3MRRByAXvjj+tOQCl2BAn8OvG8rkBtiutNwoW0H24Hbu8SXIF8E0acwHdCLLA9RxHnmJvzIlbuSfpe0u+9JdaP8XyCKyEiQuYnY4zE9icxs3t+4Pc8AbtMaktMpSVtKjhiEohPPUZ1mOEmFIjHglAkUQsywnrgJq/DPpIHMNa8iDZQXUbt1G0REr+jnDHkfI46eFGaKPMdsgaO6dpKj2HjvMKFuylexACASVY/0JnV+qDVUtBqCjTLxiFBlHyB1OVyGEQ9iJ/cEECkXBx6iYvEA274rnX9nHP2iV3x8urjSOVS1BkVpKP3MxSm+ZHg/nnyK/7ok5tH81BuQZnw2TYXIXLEoA4MXhXk+4HQOacQorAjKZzMolBHmZU2W3RScgKPIV96MmBWJVOUOEQoY3W20/CTAX5BMJyY5iOWS+vN6igtpjlE6fLddw5P3WucyacSMCFK0qUtWypMnAoo2yvrYXBZoa5RVUvZAJwdKi16/90H7h/TcC4POQOV8fxq7EgXY8e+/W0KL/+ch2JLq3mBoo7mSWExj7nTgmKwgcP4vLCBqNpty1XBxWuoS4VBcLD0IVm6gInMRmRY4TKjBZ5Lyq/EEl0MfGwtLFuP7b++vqUUGEI1vok78yk5+v9/u9aEFqeA6uUQMYbd04h243EwImBINrbBxJyUsoA38KvlPW08rt/lPOhzpVpSGwx8+1LIk2nzy7Vrbz/84cK4bohimwgPMWv6NdohUe8blDtsBquiLFc1rnF2BbVMJNfZKi4PDIvx9E6RW44ptAMPj04+Iudv3hBaxblo88Bcal+U82lG+3lX+5nakly1Ec0l1U8PXqll76slpMmU4hnvVzI3iGhMNFPr2Fbi1bqvL5eaLK6WIYF57FAUYlfpB3vylxOTe+Sbj1c/2716SgNQdbVRfJP2zPY/yBOIzehpfuAF01waWQ2PiZ7aHPn9w3+//PunH3Wz9OuXHDYiBzMTtGLy7wpC06ImM4qyjZKktK88+W7x4D+/3tajr6w0KXvXT3+PfQFGW7pxZz+6/OMNgCtgWCnVJKHW42r56BnOBU043wgAAA=="
}
}

trait ExceptionsDsl extends impl.ExceptionsDefs
