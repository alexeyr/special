package scalan.common

import scalan.Base
import scala.reflect.runtime.universe.{WeakTypeTag, weakTypeTag}
import scalan.meta.ScalanAst._

package impl {
// Abs -----------------------------------
trait KindsDefs extends scalan.Scalan with Kinds {
  self: KindsDsl =>

  // entityProxy: single proxy for each type family
  implicit def proxyKind[F[_], A](p: Rep[Kind[F, A]]): Kind[F, A] = {
    proxyOps[Kind[F, A]](p)(scala.reflect.classTag[Kind[F, A]])
  }

  // familyElem
  class KindElem[F[_], A, To <: Kind[F, A]](implicit _cF: Cont[F], _eA: Elem[A])
    extends EntityElem[To] {
    def cF = _cF
    def eA = _eA
    lazy val parent: Option[Elem[_]] = None
    lazy val typeArgs = TypeArgs("F" -> (cF -> scalan.util.Invariant), "A" -> (eA -> scalan.util.Invariant))
    override lazy val tag = {
      implicit val tagA = eA.tag
      weakTypeTag[Kind[F, A]].asInstanceOf[WeakTypeTag[To]]
    }
    override def convert(x: Rep[Def[_]]) = {
      implicit val eTo: Elem[To] = this
      val conv = fun {x: Rep[Kind[F, A]] => convertKind(x) }
      tryConvert(element[Kind[F, A]], this, x, conv)
    }

    def convertKind(x: Rep[Kind[F, A]]): Rep[To] = {
      x.elem.asInstanceOf[Elem[_]] match {
        case _: KindElem[_, _, _] => x.asRep[To]
        case e => !!!(s"Expected $x to have KindElem[_, _, _], but got $e", x)
      }
    }

    override def getDefaultRep: Rep[To] = ???
  }

  implicit def kindElement[F[_], A](implicit cF: Cont[F], eA: Elem[A]): Elem[Kind[F, A]] =
    cachedElem[KindElem[F, A, Kind[F, A]]](cF, eA)

  implicit case object KindCompanionElem extends CompanionElem[KindCompanionCtor] {
    lazy val tag = weakTypeTag[KindCompanionCtor]
    protected def getDefaultRep = Kind
  }

  abstract class KindCompanionCtor extends CompanionDef[KindCompanionCtor] with KindCompanion {
    def selfType = KindCompanionElem
    override def toString = "Kind"
  }
  implicit def proxyKindCompanionCtor(p: Rep[KindCompanionCtor]): KindCompanionCtor =
    proxyOps[KindCompanionCtor](p)

  case class ReturnCtor[F[_], A]
      (override val a: Rep[A])(implicit eA: Elem[A], cF: Cont[F])
    extends Return[F, A](a) with Def[Return[F, A]] {
    lazy val selfType = element[Return[F, A]]
  }
  // elem for concrete class
  class ReturnElem[F[_], A](val iso: Iso[ReturnData[F, A], Return[F, A]])(implicit override val eA: Elem[A], override val cF: Cont[F])
    extends KindElem[F, A, Return[F, A]]
    with ConcreteElem[ReturnData[F, A], Return[F, A]] {
    override lazy val parent: Option[Elem[_]] = Some(kindElement(container[F], element[A]))
    override lazy val typeArgs = TypeArgs("F" -> (cF -> scalan.util.Invariant), "A" -> (eA -> scalan.util.Invariant))

    override def convertKind(x: Rep[Kind[F, A]]) = // Converter is not generated by meta
!!!("Cannot convert from Kind to Return: missing fields List(a)")
    override def getDefaultRep = Return(element[A].defaultRepValue)
    override lazy val tag = {
      implicit val tagA = eA.tag
      weakTypeTag[Return[F, A]]
    }
  }

  // state representation type
  type ReturnData[F[_], A] = A

  // 3) Iso for concrete class
  class ReturnIso[F[_], A](implicit eA: Elem[A], cF: Cont[F])
    extends EntityIso[ReturnData[F, A], Return[F, A]] with Def[ReturnIso[F, A]] {
    override def from(p: Rep[Return[F, A]]) =
      p.a
    override def to(p: Rep[A]) = {
      val a = p
      Return(a)
    }
    lazy val eFrom = element[A]
    lazy val eTo = new ReturnElem[F, A](self)
    lazy val selfType = new ReturnIsoElem[F, A](eA, cF)
    def productArity = 2
    def productElement(n: Int) = n match {
      case 0 => eA
      case 1 => cF
    }
  }
  case class ReturnIsoElem[F[_], A](eA: Elem[A], cF: Cont[F]) extends Elem[ReturnIso[F, A]] {
    def getDefaultRep = reifyObject(new ReturnIso[F, A]()(eA, cF))
    lazy val tag = {
      implicit val tagA = eA.tag
      weakTypeTag[ReturnIso[F, A]]
    }
    lazy val typeArgs = TypeArgs("F" -> (cF -> scalan.util.Invariant), "A" -> (eA -> scalan.util.Invariant))
  }
  // 4) constructor and deconstructor
  class ReturnCompanionCtor extends CompanionDef[ReturnCompanionCtor] with ReturnCompanion {
    def selfType = ReturnCompanionElem
    override def toString = "ReturnCompanion"

    @scalan.OverloadId("fromFields")
    def apply[F[_], A](a: Rep[A])(implicit cF: Cont[F]): Rep[Return[F, A]] =
      mkReturn(a)

    def unapply[F[_], A](p: Rep[Kind[F, A]]) = unmkReturn(p)
  }
  lazy val ReturnRep: Rep[ReturnCompanionCtor] = new ReturnCompanionCtor
  lazy val Return: ReturnCompanionCtor = proxyReturnCompanion(ReturnRep)
  implicit def proxyReturnCompanion(p: Rep[ReturnCompanionCtor]): ReturnCompanionCtor = {
    proxyOps[ReturnCompanionCtor](p)
  }

  implicit case object ReturnCompanionElem extends CompanionElem[ReturnCompanionCtor] {
    lazy val tag = weakTypeTag[ReturnCompanionCtor]
    protected def getDefaultRep = ReturnRep
  }

  implicit def proxyReturn[F[_], A](p: Rep[Return[F, A]]): Return[F, A] =
    proxyOps[Return[F, A]](p)

  implicit class ExtendedReturn[F[_], A](p: Rep[Return[F, A]])(implicit eA: Elem[A], cF: Cont[F]) {
    def toData: Rep[ReturnData[F, A]] = isoReturn(eA, cF).from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoReturn[F[_], A](implicit eA: Elem[A], cF: Cont[F]): Iso[ReturnData[F, A], Return[F, A]] =
    reifyObject(new ReturnIso[F, A]()(eA, cF))

  case class BindCtor[F[_], S, B]
      (override val a: Rep[Kind[F, S]], override val f: Rep[S => Kind[F, B]])(implicit eS: Elem[S], eA: Elem[B], cF: Cont[F])
    extends Bind[F, S, B](a, f) with Def[Bind[F, S, B]] {
    lazy val selfType = element[Bind[F, S, B]]
  }
  // elem for concrete class
  class BindElem[F[_], S, B](val iso: Iso[BindData[F, S, B], Bind[F, S, B]])(implicit val eS: Elem[S], override val eA: Elem[B], override val cF: Cont[F])
    extends KindElem[F, B, Bind[F, S, B]]
    with ConcreteElem[BindData[F, S, B], Bind[F, S, B]] {
    override lazy val parent: Option[Elem[_]] = Some(kindElement(container[F], element[B]))
    override lazy val typeArgs = TypeArgs("F" -> (cF -> scalan.util.Invariant), "S" -> (eS -> scalan.util.Invariant), "B" -> (eA -> scalan.util.Invariant))

    override def convertKind(x: Rep[Kind[F, B]]) = // Converter is not generated by meta
!!!("Cannot convert from Kind to Bind: missing fields List(a, f)")
    override def getDefaultRep = Bind(element[Kind[F, S]].defaultRepValue, constFun[S, Kind[F, B]](element[Kind[F, B]].defaultRepValue))
    override lazy val tag = {
      implicit val tagS = eS.tag
      implicit val tagB = eA.tag
      weakTypeTag[Bind[F, S, B]]
    }
  }

  // state representation type
  type BindData[F[_], S, B] = (Kind[F, S], S => Kind[F, B])

  // 3) Iso for concrete class
  class BindIso[F[_], S, B](implicit eS: Elem[S], eA: Elem[B], cF: Cont[F])
    extends EntityIso[BindData[F, S, B], Bind[F, S, B]] with Def[BindIso[F, S, B]] {
    override def from(p: Rep[Bind[F, S, B]]) =
      (p.a, p.f)
    override def to(p: Rep[(Kind[F, S], S => Kind[F, B])]) = {
      val Pair(a, f) = p
      Bind(a, f)
    }
    lazy val eFrom = pairElement(element[Kind[F, S]], element[S => Kind[F, B]])
    lazy val eTo = new BindElem[F, S, B](self)
    lazy val selfType = new BindIsoElem[F, S, B](eS, eA, cF)
    def productArity = 3
    def productElement(n: Int) = n match {
      case 0 => eS
      case 1 => eA
      case 2 => cF
    }
  }
  case class BindIsoElem[F[_], S, B](eS: Elem[S], eA: Elem[B], cF: Cont[F]) extends Elem[BindIso[F, S, B]] {
    def getDefaultRep = reifyObject(new BindIso[F, S, B]()(eS, eA, cF))
    lazy val tag = {
      implicit val tagS = eS.tag
      implicit val tagB = eA.tag
      weakTypeTag[BindIso[F, S, B]]
    }
    lazy val typeArgs = TypeArgs("F" -> (cF -> scalan.util.Invariant), "S" -> (eS -> scalan.util.Invariant), "B" -> (eA -> scalan.util.Invariant))
  }
  // 4) constructor and deconstructor
  class BindCompanionCtor extends CompanionDef[BindCompanionCtor] with BindCompanion {
    def selfType = BindCompanionElem
    override def toString = "BindCompanion"
    @scalan.OverloadId("fromData")
    def apply[F[_], S, B](p: Rep[BindData[F, S, B]]): Rep[Bind[F, S, B]] = {
      implicit val cF = p._1.elem.typeArgs("F")._1.asCont[F];
implicit val eS = p._1.elem.typeArgs("A")._1.asElem[S];
implicit val eB = p._2.elem.eRange.typeArgs("A")._1.asElem[B]
      isoBind[F, S, B].to(p)
    }

    @scalan.OverloadId("fromFields")
    def apply[F[_], S, B](a: Rep[Kind[F, S]], f: Rep[S => Kind[F, B]]): Rep[Bind[F, S, B]] =
      mkBind(a, f)

    def unapply[F[_], S, B](p: Rep[Kind[F, B]]) = unmkBind(p)
  }
  lazy val BindRep: Rep[BindCompanionCtor] = new BindCompanionCtor
  lazy val Bind: BindCompanionCtor = proxyBindCompanion(BindRep)
  implicit def proxyBindCompanion(p: Rep[BindCompanionCtor]): BindCompanionCtor = {
    proxyOps[BindCompanionCtor](p)
  }

  implicit case object BindCompanionElem extends CompanionElem[BindCompanionCtor] {
    lazy val tag = weakTypeTag[BindCompanionCtor]
    protected def getDefaultRep = BindRep
  }

  implicit def proxyBind[F[_], S, B](p: Rep[Bind[F, S, B]]): Bind[F, S, B] =
    proxyOps[Bind[F, S, B]](p)

  implicit class ExtendedBind[F[_], S, B](p: Rep[Bind[F, S, B]])(implicit eS: Elem[S], eA: Elem[B], cF: Cont[F]) {
    def toData: Rep[BindData[F, S, B]] = isoBind(eS, eA, cF).from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoBind[F[_], S, B](implicit eS: Elem[S], eA: Elem[B], cF: Cont[F]): Iso[BindData[F, S, B], Bind[F, S, B]] =
    reifyObject(new BindIso[F, S, B]()(eS, eA, cF))

  registerModule(Kinds_Module)

  lazy val Kind: Rep[KindCompanionCtor] = new KindCompanionCtor {
  }

  object ReturnMethods {
    // WARNING: Cannot generate matcher for method `flatMap`: Method has function arguments f
  }

  object ReturnCompanionMethods {
  }

  def mkReturn[F[_], A]
    (a: Rep[A])(implicit cF: Cont[F]): Rep[Return[F, A]] = {
    implicit val eA = a.elem
    new ReturnCtor[F, A](a)
  }
  def unmkReturn[F[_], A](p: Rep[Kind[F, A]]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: ReturnElem[F, A] @unchecked =>
      Some((p.asRep[Return[F, A]].a))
    case _ =>
      None
  }

  object BindMethods {
    // WARNING: Cannot generate matcher for method `flatMap`: Method has function arguments f1
  }

  object BindCompanionMethods {
  }

  def mkBind[F[_], S, B]
    (a: Rep[Kind[F, S]], f: Rep[S => Kind[F, B]]): Rep[Bind[F, S, B]] = {
    implicit val cF = a.elem.typeArgs("F")._1.asCont[F];
implicit val eS = a.elem.typeArgs("A")._1.asElem[S];
implicit val eB = f.elem.eRange.typeArgs("A")._1.asElem[B]
    new BindCtor[F, S, B](a, f)
  }
  def unmkBind[F[_], S, B](p: Rep[Kind[F, B]]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: BindElem[F, S, B] @unchecked =>
      Some((p.asRep[Bind[F, S, B]].a, p.asRep[Bind[F, S, B]].f))
    case _ =>
      None
  }

  object KindMethods {
    // WARNING: Cannot generate matcher for method `flatMap`: Method has function arguments f

    object mapBy {
      def unapply(d: Def[_]): Option[(Rep[Kind[F, A]], Rep[A => B]) forSome {type F[_]; type A; type B}] = d match {
        case MethodCall(receiver, method, Seq(f, _*), _) if (receiver.elem.asInstanceOf[Elem[_]] match { case _: KindElem[_, _, _] => true; case _ => false }) && method.getName == "mapBy" =>
          Some((receiver, f)).asInstanceOf[Option[(Rep[Kind[F, A]], Rep[A => B]) forSome {type F[_]; type A; type B}]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[(Rep[Kind[F, A]], Rep[A => B]) forSome {type F[_]; type A; type B}] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }

  object KindCompanionMethods {
  }
}

object Kinds_Module extends scalan.ModuleInfo {
  val dump = "H4sIAAAAAAAAAMVXTWwbRRQeO3ZsJ2mbtKIqoj8mchUoxa7ooaAIgZ3YJK2bRNlCUaiIxrtjd8vu7LI7DmsO5UQPcEEIIUDiUNGKS1QJkBBwBgkh1APixokDB9SAUA+thATizexvHK/jFCF8GO2M376f733fzOz6byhtWyhvy1jDtKgThouSeC7brCCdNZS2RmZJc3Hj9cO/fnT8ThJNrKDhi9ietbUVlHMfqo4ZPEtMqaOJmkqVKmUq6xR04YKhYt2NUeIxSr1iFCJvTddRDlOZ2MywbIYedF8uyYamEZmpBi2put5muKGRUl21GdinGobSeRldRsk6GpcNKluEEWlGw7ZNbG89S7h7NZjnxLyzaIYxtiZ4zsIqg/wgxrhrv0xMqUMN2tEZ2u2ltmjytMBmlDgmADGvm5oIk6qjjKqbhsX8qBmIcNFQ/GmKYlhAe+uX8BouQdRWSWKWSlvcmYnll3CLLIAJN09DDTbRmuc6JvGcj9pM2RTPMRFCJnT1MZFZMQStGIBW5KAVJGKpWFNfxfzPJctwOsj9JYYQcriL49u48D2QKlUKb1yQX7grjepJ/rLDc8mKjDLg6EgMw0R/ANxvl9+2bz9z9VQSjaygEdUuN2xmYZlFeeDhNYopNZjIOYAQWy1o4WRcC0WUMth08SQnG7qJKXjywByDTmmqrDJuzNd2ef2JAT/DTOKbJh0zEdQbpyhBphmsaUu37n/06Eb1+WRAAS9EDlxKICnLd8pQ6gwow3PNx3GGErUQXz4tiykfRpxwzPbJJMBk6tbvyjcn0IUkSnhIeoEHax642Pv4B18dJUs3kii7Ishe03BLtJFDNUtseQVljTViueuZNazxp56tzCikidsa8wCOIjMEyDCUj9WpSThs04L/Cb/8UZfBCwYlhdpS4Y703TvrnKAWGnP/cYX7t3rqr592N5ngLuCJfWSHQOxd0MdjPeK6lAydTEzeVl+8+iYTqCaczfpebFwCOU2L9470Adjfej65cuW+P66t7hPqyDZUpmOzcGIH2vCp/B9yHwWouKw8EM75kAdU9ywT1rboTDRwPvJGBOcHEn4PhRFDSVL2G5CqakTv05MYB3ItcDBjUNZTT9GmMjTs5iscBGI4FNcrgcbGn9e+lN66/kQSDZ9G6Saw3K6jdMNoU8WHGc4mRhxW8de69A+wYgvrwZG1hmGLhTYztN9nfpupWuk5b93lO/zyKMSTFxQp8OmeFqs+bfd7JXG/xXnqRmSFR75Yf0W9+XBNaCJEZq6Py7ANc5FejCU2gz3AflaJ0dgWnqCuNvdT7gBxpS1xY8I0e4Sx0OF4ctTaVP5x/v19ew6t/iw2/WHF0LEq2HUQOGLBxiA4cNDbecN0/jVuUfSmxHhsALnuqkC4exSr1E+sUZDvSe2V7R3sXO0pXm5U6/E030ZbfAgjzA0mnRCUflaVXm49EDJeZzfXOgTnx45l0PuI2yTCLv7sgFZnetPKv+j8fy3YsnuF43thVlOg82KMzmeJrGGLKPw2TnT4WnCP4pPvPnX+9IHzz4rLwJgijNx/gvtM72+bs9icFhfxh/pcxMGoUNVN1uEPJ79+8ofXvv/4erBpZ73q0qLrAL+XOhz/undL4BVNxlQkeYc+sOjy3Q8Xjt387Bexe43w6wNcqmjwWRMeYk7XvpsVoeEjJcIqaDa/T0S48ykfPv8HT3OQ+pIOAAA="
}
}

trait KindsDsl extends impl.KindsDefs
